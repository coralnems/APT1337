services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: dentist_app
      POSTGRES_USER: dentist_user
      POSTGRES_PASSWORD: dentist_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dentist_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]

  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://dentist_user:dentist_password@postgres:5432/dentist_app
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["./entrypoint.sh", "node", "server.js"]
  
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Don't override node_modules with local copy
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
  
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - VIRTUAL_HOST=vortexdrones.pro,www.vortexdrones.pro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
      
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  pgdata:
  redis_data:  # Added volume for Redis data persistence

networks:
  app-network:
    driver: bridge